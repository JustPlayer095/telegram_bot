name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-mock
    
    - name: Run tests
      env:
        BOT_TOKEN: '1234567890:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghij'
        DATABASE_URL: postgresql://test:test@localhost:5432/test_db
      run: |
        python -m pytest tests/ -v

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/telegram-bot:latest
    
    - name: Deploy to Railway
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
        RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      run: |
        # First, set the environment variables in Railway
        curl -X POST \
          -H "Authorization: Bearer $RAILWAY_TOKEN" \
          -H "Content-Type: application/json" \
          -d "{\"query\":\"mutation { projectUpdate(id: \\\"$RAILWAY_PROJECT_ID\\\", serviceId: \\\"$RAILWAY_SERVICE_ID\\\", variables: [{ key: \\\"BOT_TOKEN\\\", value: \\\"$BOT_TOKEN\\\" }]) { id } }\"}" \
          https://backboard.railway.app/graphql/v2

        # Then deploy the new image
        curl -X POST \
          -H "Authorization: Bearer $RAILWAY_TOKEN" \
          -H "Content-Type: application/json" \
          -d "{\"projectId\":\"$RAILWAY_PROJECT_ID\",\"serviceId\":\"$RAILWAY_SERVICE_ID\",\"image\":\"${{ secrets.DOCKERHUB_USERNAME }}/telegram-bot:latest\"}" \
          https://backboard.railway.app/graphql/v2 